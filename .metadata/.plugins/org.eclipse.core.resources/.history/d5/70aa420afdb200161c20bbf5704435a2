package PruebaDanielRomero;
/***********************************************************/

/* Ejercicio Ejercicio2 */

/* Autor: Daniel Romero */

/* Fecha: 25 de noviembre */

/***********************************************************/
public class Parking {	
	public static void main(String[] args) {
		Barrera entrada = new Barrera(5,3);
		for (int i = 0; i <= 10; i++){
			Coche coche = new Coche("Coche " + i, entrada);
			coche.start();
			
			long tEspera = (long) (Math.random()*7+1)*1000;
			try {
				Thread.sleep(tEspera);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		/*INICIO AÑADIDO*/
		for (int i = 0; i <= 5; i++){
			Moto moto = new Moto("Moto " + i, entrada);
			moto.start();
			
			long tEspera = (long) (Math.random()*7+1)*1000;
			try {
				Thread.sleep(tEspera);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		/*FIN AÑADIDO*/
	}	
}
/*INICIO AÑADIDO*/
class Moto extends Thread{
	private String nombre;
	private Barrera barrera;
	public Moto (String nombre, Barrera barrera){
		this.nombre = nombre;
		this.barrera = barrera;
	}
	public void run(){
		barrera.entrar(nombre);
		System.out.println(nombre +" he aparcado y me espero.");
		// LA moto aparca, se espera y luego sale del parking
		Espera.espera(5000);
		barrera.salir(nombre);
	}
}
/*FIN AÑADIDO*/
class Coche extends Thread{
	private String nombre;
	private Barrera barrera;
	
	public Coche (String nombre, Barrera barrera){
		this.nombre = nombre;
		this.barrera = barrera;
	}
	
	public void run(){
		barrera.entrar(nombre);
		System.out.println(nombre +" he aparcado y me espero.");
		// El coche aparca, se espera y luego sale del parking
		Espera.espera(5000);
		barrera.salir(nombre);
	}
}

class Barrera {
	private int huecosCoches;
	private int huecosMotos;
	public  Barrera (int huecosCoches, int huecosMotos){
		this.huecosCoches = huecosCoches;
		this.huecosMotos = huecosMotos;
	}
	
	public void entrar(String nombre){
		if (nombre.startsWith("Coche")){
		synchronized (this) {
			try {
				while (huecosCoches < 1 ) {
					System.out.println(nombre +" no puedo entrar.");
					wait();
				}
				huecosCoches--;
			} catch (InterruptedException e) {
				System.out.println(nombre + " interrumpido");
			}
			
		}
		System.out.println(nombre +" entrando. Plazas: "+ huecosCoches);
		Espera.espera(5000);
		}
/*INICIO AÑADIDO*/
	if (nombre.startsWith("Moto")){
		synchronized (this) {
			try {
				while (huecosMotos < 1 ) {
					System.out.println(nombre +" no puedo entrar.");
					wait();
				}
				huecosMotos--;
			} catch (InterruptedException e) {
				System.out.println(nombre + " interrumpido");
			}
			
		}
		System.out.println(nombre +" entrando. Plazas: "+ huecosMotos);
		Espera.espera(5000);
		}
	}
/*FIN AÑADIDO*/
	public synchronized void salir(String nombre){
		huecosCoches++;
		notifyAll();
		System.out.println(nombre +" saliendo. Plazas: "+ huecosCoches);
	}
}

class Espera {
	public static void espera(long espera){
		try{
			Thread.sleep(espera);
		}catch (InterruptedException e) {
			System.err.println ("Thread coche interrumpido");
			System.exit(-1);
		}
	}
}